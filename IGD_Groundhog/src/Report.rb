module IGD
	module Groundhog
		module Report

			@format = {
				:units => "mm",
				:size => "letter", #letter is 215.9 by 279.4 mm
				:left_margin => 25,
				:right_margin => 25,
				:top_margin => 25,
				:bottom_margin => 25
			}

			@styles = {
				"main_title" => {:font_size => 22, :color => [0,0,0], :font_type => "bold", :left => "center", :font => 'helvetica'},
				"sub_title" => {:font_size => 18, :color => [0,0,0], :font_type => "normal", :left => "center", :font => 'helvetica'},
				"cover_info" => {:font_size => 18, :color => [0,0,0], :font_type => "normal", :left => "center", :font => 'helvetica'},
				"section_title" => {:font_size => 18, :color => [0,0,0], :font_type => "normal", :left => "center", :font => 'helvetica'},
				"title_1" => {:font_size => 18, :color => [0,0,0], :font_type => "bold", :left => "center", :font => 'helvetica'},
				"title_2" => {:font_size => 16, :color => [0,0,0], :font_type => "bold", :left => 0.0, :font => 'helvetica'},
				"normal" => {:font_size => 12, :color => [0,0,0], :font_type => "normal", :left => 0.0, :font => 'helvetica'},
				"disclaimer" => {:font_size => 12, :color => [0,0,0], :font_type => "normal", :left => "center", :font => 'helvetica'},
			}

			@disclaimer="This report was automatically generated by using Groundhog v#{Sketchup.extensions["Groundhog"].version} (www.groundhogproject.org), which is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose. See the GNU General Public License for more details.\\n\\nThe accuracy of the results may be highly affected both by the modelling decisions and the parameters used during the simulation. Accordingly, if you have any concern about accuracy, please ask the author of this report.\\n\\nGroundhog was used under SketchUp #{Sketchup.version}"

			@position=0.0 #this keeps track of the vertical position of the line we write on the report














			# Returns a script that is used to write and save a PDF report using jsPDF
			# @author German Molina
			# @return [String] The javascript script
			def self.write_report
				ret="var doc = new jsPDF('portrait','#{@format[:units]}','#{@format[:size]}');"
				ret+="doc.setProperties({subject: 'Groundhog v#{Sketchup.extensions["Groundhog"].version} automatic report',author: 'Groundhog (www.groundhogproject.org)',creator: 'Groundhog (www.groundhogproject.org)'});"

				# Cover
				@position = 10.0
				ret+= self.write_text("main_title","Lighting Analysis Report")
				@position += 12
				ret+= self.write_text("sub_title","Proyect Name")
				@position += 30
				ret+= self.write_text("cover_info","#{Time.now}")
				@position += 30
				ret+= self.write_text("cover_info","Author of report")
				@position += 20
				ret+= self.write_text("cover_info","Company")
				@position += 10

				#Disclaimer
				ret+= self.next_page
				ret+= self.write_text("title_1","Disclaimer")
				@position+= 12
				ret+= self.write_text("title_1","#{@disclaimer}")

				#Daylighting analsys
				ret+= self.write_text("section_title","Disclaimer")
				ret+= self.next_page

				#Planes daylight
				ret+= self.write_text("section_title","Plane 1")
				ret+= self.next_page


				ret += "doc.save('GH_AutoReport.pdf');"
				return ret
			end




			# Returns a javascript that is used to write some text with a certain format
			#
			# If the text is long, it will be split on several lines.
			#
			# @author German Molina
			# @param style [String] The style which we are writing
			# @param text [String] The text to write
			# @return [String] The javascript script
			def self.write_text(style,text)
				properties=@styles[style]
				ret =  "doc.setFont('#{properties[:font]}');"
				ret += "doc.setFontType('#{properties[:font_type]}');"
				ret += "doc.setFontSize(#{properties[:font_size]});"

				page_width = 215.9-@format[:left_margin]-@format[:right_margin]
				width=page_width
				width = page_width - properties[:left] if properties[:left].is_a? Numeric

				ret+= "var text = doc.splitTextToSize('#{text}', #{width});"
				ret+= "doc.text(15, #{@position}, text);"


				return ret
			end

			def self.next_page
				@position=0.0
				"doc.addPage();"
			end











      # Exports a CSV with the values and statistics of a solved workplane
      # @author German Molina
      # @param group [Solved Workplane] A Solved Workplane that will be exported
      def self.report_csv(group)
        if not Labeler.solved_workplane? group then
          UI.messagebox "ERROR: Attempted to report a CSV file from a group that is not a Solved Workplane"
          return
        end

        begin
          path=Exporter.getpath #it returns false if not successful
          path="" if not path

          value=JSON.parse(Labeler.get_value(group))
          filename="#{Utilities.fix_name(value["workplane"])}_#{Utilities.fix_name(value["metric"])}.csv"
          filename=UI.savepanel("Export CSV file of results",path,filename)

          if filename then
            File.open(filename,'w'){|csv|
              statistics = Results.get_workplane_statistics(group)
              #write statistics
              statistics.to_a.each{|element|
                csv.puts "#{element[0]},#{element[1]}"
              }
              #Write header
              csv.puts "Position X, Position Y, Position Z, Value (depends on the metric)"
              #Write pixels
              pixels = group.entities.select{|x| Labeler.result_pixel?(x)}
              pixels.each do |pixel|
                vertices=pixel.vertices
                nvertices=vertices.length
                center=vertices.shift.position.to_a
                vertices.each{|vert|
                  pos=vert.position.to_a
                  center[0]+=pos[0]
                  center[1]+=pos[1]
                  center[2]+=pos[2]
                }
                csv.puts "#{(center[0]/nvertices).to_m},#{(center[1]/nvertices).to_m},#{(center[2]/nvertices).to_m},#{Labeler.get_value(pixel)}"
              end
            }
          end


				rescue Exception => ex
					UI.messagebox ex
          model.abort_operation          
        end
      end




    end # end REPORT module
  end # end Groundhog
end #end IGD
